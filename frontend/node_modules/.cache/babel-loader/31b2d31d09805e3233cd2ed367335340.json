{"ast":null,"code":"import _slicedToArray from \"/mnt/c/Users/teste/project/syncimage/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/mnt/c/Users/teste/project/syncimage/frontend/src/componentes/LoadingImages/index.js\";\nimport React, { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nconst user_id = localStorage.getItem(\"user_id\");\nexport default function LoadingImages(props) {\n  // images\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        listItems = _useState2[0],\n        setListItems = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        imagesTrue = _useState4[0],\n        setImagesTrue = _useState4[1]; // pagination\n\n\n  const _useState5 = useState(1),\n        _useState6 = _slicedToArray(_useState5, 2),\n        currentPage = _useState6[0],\n        setCurrentPage = _useState6[1];\n\n  const imagesporpage = 6;\n  useMemo(() => {\n    (async function () {\n      try {\n        // Busca as imagens\n        const response = await axios.get(\"http://localhost:3001/api/image/\".concat(user_id)); // Salva todas as imagens\n\n        setImagesTrue(response.data); // Carrega as 6 primeiras imagens\n\n        const data = response.data;\n        const currentImages = data.slice(0, 6);\n        setListItems(currentImages);\n      } catch (error) {\n        console.log({\n          error\n        });\n      }\n    })();\n  }, []); // Captura o evento de scroll\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        isFetching = _useState8[0],\n        setIsFetching = _useState8[1]; // Verifica se é pra carregar mais imagens\n\n\n  useEffect(() => {\n    function fetchMoreListItems() {\n      const arrayLenght = imagesTrue.length - 1;\n\n      if (arrayLenght >= currentPage) {\n        // Carrega mais itens a lista\n        const indexOfLastImage = currentPage * imagesporpage;\n        const currentImages = imagesTrue.slice(0, indexOfLastImage);\n        setListItems(currentImages); // Atualiza a pagina atual do carregamento\n\n        var i = currentPage + 1;\n        setCurrentPage(i); // Declara que não prescisa buscar mais\n\n        setIsFetching(false);\n      } else {\n        setIsFetching(false);\n      }\n    }\n\n    if (!isFetching) return;\n    fetchMoreListItems();\n  }); // Verifica se o scroll do mouse tá no fim da pagina\n\n  function handleScroll() {\n    if (window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight) return;\n    setIsFetching(true);\n  } // Renderiza o componente\n\n\n  return React.createElement(\"ul\", {\n    className: \"content-galeria\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, listItems ? listItems.map(item => React.createElement(\"li\", {\n    className: \"card-image\",\n    key: item._id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: item.link,\n    alt: item.title,\n    className: \"card-img\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }))) : 'Galeria Vazia');\n}\n;","map":{"version":3,"sources":["/mnt/c/Users/teste/project/syncimage/frontend/src/componentes/LoadingImages/index.js"],"names":["React","useState","useEffect","useMemo","axios","user_id","localStorage","getItem","LoadingImages","props","listItems","setListItems","imagesTrue","setImagesTrue","currentPage","setCurrentPage","imagesporpage","response","get","data","currentImages","slice","error","console","log","window","addEventListener","handleScroll","removeEventListener","isFetching","setIsFetching","fetchMoreListItems","arrayLenght","length","indexOfLastImage","i","innerHeight","document","documentElement","scrollTop","offsetHeight","map","item","_id","link","title"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst user_id = localStorage.getItem(\"user_id\");\r\n\r\nexport default function LoadingImages(props) {\r\n\r\n    // images\r\n    const [listItems, setListItems] = useState(null);\r\n    const [imagesTrue, setImagesTrue] = useState(null)\r\n\r\n    // pagination\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const imagesporpage = 6;\r\n\r\n\r\n    useMemo(() => {\r\n\r\n        (async function () {\r\n            try {\r\n                // Busca as imagens\r\n                const response = await axios.get(`http://localhost:3001/api/image/${user_id}`);\r\n\r\n                // Salva todas as imagens\r\n                setImagesTrue(response.data);\r\n\r\n                // Carrega as 6 primeiras imagens\r\n                const data = response.data;\r\n                const currentImages = data.slice(0, 6);\r\n                setListItems(currentImages);\r\n\r\n            } catch (error) {\r\n                console.log({ error })\r\n            }\r\n\r\n        }());\r\n    }, [])\r\n\r\n    // Captura o evento de scroll\r\n    useEffect(() => {\r\n        window.addEventListener('scroll', handleScroll);\r\n        return () => window.removeEventListener('scroll', handleScroll);\r\n    }, []);\r\n\r\n\r\n    const [isFetching, setIsFetching] = useState(false);\r\n\r\n    // Verifica se é pra carregar mais imagens\r\n    useEffect(() => {\r\n        function fetchMoreListItems() {\r\n\r\n            const arrayLenght = imagesTrue.length - 1;\r\n\r\n            if (arrayLenght >= currentPage) {\r\n\r\n                // Carrega mais itens a lista\r\n                const indexOfLastImage = currentPage * imagesporpage;\r\n                const currentImages = imagesTrue.slice(0, indexOfLastImage);\r\n                setListItems(currentImages);\r\n\r\n                // Atualiza a pagina atual do carregamento\r\n                var i = currentPage + 1;\r\n                setCurrentPage(i)\r\n\r\n                // Declara que não prescisa buscar mais\r\n                setIsFetching(false);\r\n            } else {\r\n\r\n                setIsFetching(false);\r\n            }\r\n\r\n        }\r\n\r\n        if (!isFetching) return;\r\n\r\n        fetchMoreListItems();\r\n    });\r\n\r\n    // Verifica se o scroll do mouse tá no fim da pagina\r\n    function handleScroll() {\r\n        if (window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight) return;\r\n        setIsFetching(true);\r\n    }\r\n\r\n\r\n  \r\n\r\n    \r\n\r\n    // Renderiza o componente\r\n    return (\r\n        <ul className=\"content-galeria\">\r\n            {listItems ? listItems.map(item => (\r\n\r\n                <li className=\"card-image\" key={item._id}>\r\n                    <img src={item.link} alt={item.title} className=\"card-img\" />\r\n                </li>\r\n            )) : 'Galeria Vazia'}\r\n        </ul>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}
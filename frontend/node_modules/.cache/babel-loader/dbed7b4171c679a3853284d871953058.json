{"ast":null,"code":"export default function ValidaForms(campo, campoName, option = {}) {\n  var erro = [];\n  [{\n    $campo,\n    $nom\n  }];\n\n  if (option.type) {\n    if (option.type == Boolean) {\n      if (campo !== true) {\n        console.log(campo);\n        erro.push({\n          messege: \"O \".concat(campoName, \" n\\xE3o pode ficar desmarcado.\")\n        });\n      }\n    }\n  } else {\n    if (!campo || campo === null || typeof campo === 'undefined' === 'undefined' || campo === '') {\n      erro.push({\n        messege: \"O campo \".concat(campoName, \" n\\xE3o pode ficar em branco.\")\n      });\n    }\n\n    if (option.min) {\n      if (campo.lenght < option.min) {\n        erro.push({\n          messege: \"O \".concat(campoName, \" deve conter no minimo \").concat(option.min, \" letras.\")\n        });\n      }\n    }\n\n    if (option.max) {\n      if (campo.lenght >= option.max) {\n        erro.push({\n          messege: \"O \".concat(campoName, \" deve conter no maximo \").concat(option.max, \" letras.\")\n        });\n      }\n    }\n  }\n\n  return erro;\n}","map":{"version":3,"sources":["/mnt/c/Users/teste/project/syncimage/frontend/src/componentes/ValidaForms.js"],"names":["ValidaForms","campo","campoName","option","erro","$campo","$nom","type","Boolean","console","log","push","messege","min","lenght","max"],"mappings":"AAAA,eAAe,SAASA,WAAT,CAAqBC,KAArB,EAA2BC,SAA3B,EAAsCC,MAAM,GAAG,EAA/C,EAAkD;AAE7D,MAAIC,IAAI,GAAG,EAAX;AAEA,GACI;AAACC,IAAAA,MAAD;AAASC,IAAAA;AAAT,GADJ;;AAKA,MAAGH,MAAM,CAACI,IAAV,EAAe;AACX,QAAGJ,MAAM,CAACI,IAAP,IAAeC,OAAlB,EAA0B;AACtB,UAAGP,KAAK,KAAK,IAAb,EAAkB;AACdQ,QAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ;AACAG,QAAAA,IAAI,CAACO,IAAL,CAAU;AACNC,UAAAA,OAAO,cAAOV,SAAP;AADD,SAAV;AAGH;AACJ;AAEJ,GAVD,MAUK;AAGD,QAAG,CAACD,KAAD,IAAUA,KAAK,KAAK,IAApB,IAA4B,OAAOA,KAAP,KAAkB,WAAlB,KAAkC,WAA9D,IAA6EA,KAAK,KAAK,EAA1F,EAA6F;AACzFG,MAAAA,IAAI,CAACO,IAAL,CAAU;AACNC,QAAAA,OAAO,oBAAaV,SAAb;AADD,OAAV;AAGF;;AAED,QAAGC,MAAM,CAACU,GAAV,EAAc;AACV,UAAGZ,KAAK,CAACa,MAAN,GAAeX,MAAM,CAACU,GAAzB,EAA6B;AACzBT,QAAAA,IAAI,CAACO,IAAL,CAAU;AACNC,UAAAA,OAAO,cAAOV,SAAP,oCAA0CC,MAAM,CAACU,GAAjD;AADD,SAAV;AAGH;AACJ;;AAED,QAAGV,MAAM,CAACY,GAAV,EAAc;AACV,UAAGd,KAAK,CAACa,MAAN,IAAgBX,MAAM,CAACY,GAA1B,EAA8B;AAC1BX,QAAAA,IAAI,CAACO,IAAL,CAAU;AACNC,UAAAA,OAAO,cAAOV,SAAP,oCAA0CC,MAAM,CAACY,GAAjD;AADD,SAAV;AAGH;AACJ;AAGL;;AAED,SAAOX,IAAP;AAIH","sourcesContent":["export default function ValidaForms(campo,campoName, option = {}){\n\n    var erro = [];\n\n    [\n        {$campo, $nom}\n    ]\n\n\n    if(option.type){\n        if(option.type == Boolean){\n            if(campo !== true){\n                console.log(campo)\n                erro.push({\n                    messege: `O ${campoName} não pode ficar desmarcado.`\n                })\n            }\n        }\n\n    }else{\n\n\n        if(!campo || campo === null || typeof(campo) === 'undefined' === 'undefined' || campo === ''){\n            erro.push({\n                messege: `O campo ${campoName} não pode ficar em branco.`\n            }) \n         }\n     \n         if(option.min){\n             if(campo.lenght < option.min){\n                 erro.push({\n                     messege: `O ${campoName} deve conter no minimo ${option.min} letras.`\n                 })\n             }\n         }\n     \n         if(option.max){\n             if(campo.lenght >= option.max){\n                 erro.push({\n                     messege: `O ${campoName} deve conter no maximo ${option.max} letras.`\n                 })\n             }\n         }\n     \n     \n    }\n\n    return erro;\n\n\n\n}"]},"metadata":{},"sourceType":"module"}